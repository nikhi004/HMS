/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Staff as PrismaStaff,
  Hostel as PrismaHostel,
} from "@prisma/client";

export class StaffServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StaffCountArgs, "select">): Promise<number> {
    return this.prisma.staff.count(args);
  }

  async staffItems<T extends Prisma.StaffFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StaffFindManyArgs>
  ): Promise<PrismaStaff[]> {
    return this.prisma.staff.findMany<Prisma.StaffFindManyArgs>(args);
  }
  async staff<T extends Prisma.StaffFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StaffFindUniqueArgs>
  ): Promise<PrismaStaff | null> {
    return this.prisma.staff.findUnique(args);
  }
  async createStaff<T extends Prisma.StaffCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StaffCreateArgs>
  ): Promise<PrismaStaff> {
    return this.prisma.staff.create<T>(args);
  }
  async updateStaff<T extends Prisma.StaffUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StaffUpdateArgs>
  ): Promise<PrismaStaff> {
    return this.prisma.staff.update<T>(args);
  }
  async deleteStaff<T extends Prisma.StaffDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StaffDeleteArgs>
  ): Promise<PrismaStaff> {
    return this.prisma.staff.delete(args);
  }

  async getHostel(parentId: string): Promise<PrismaHostel | null> {
    return this.prisma.staff
      .findUnique({
        where: { id: parentId },
      })
      .hostel();
  }
}
