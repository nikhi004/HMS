/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Hostel } from "./Hostel";
import { HostelCountArgs } from "./HostelCountArgs";
import { HostelFindManyArgs } from "./HostelFindManyArgs";
import { HostelFindUniqueArgs } from "./HostelFindUniqueArgs";
import { CreateHostelArgs } from "./CreateHostelArgs";
import { UpdateHostelArgs } from "./UpdateHostelArgs";
import { DeleteHostelArgs } from "./DeleteHostelArgs";
import { RoomFindManyArgs } from "../../room/base/RoomFindManyArgs";
import { Room } from "../../room/base/Room";
import { StaffFindManyArgs } from "../../staff/base/StaffFindManyArgs";
import { Staff } from "../../staff/base/Staff";
import { StudentFindManyArgs } from "../../student/base/StudentFindManyArgs";
import { Student } from "../../student/base/Student";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { HostelService } from "../hostel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Hostel)
export class HostelResolverBase {
  constructor(
    protected readonly service: HostelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "read",
    possession: "any",
  })
  async _hostelsMeta(
    @graphql.Args() args: HostelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Hostel])
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "read",
    possession: "any",
  })
  async hostels(@graphql.Args() args: HostelFindManyArgs): Promise<Hostel[]> {
    return this.service.hostels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Hostel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "read",
    possession: "own",
  })
  async hostel(
    @graphql.Args() args: HostelFindUniqueArgs
  ): Promise<Hostel | null> {
    const result = await this.service.hostel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hostel)
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "create",
    possession: "any",
  })
  async createHostel(@graphql.Args() args: CreateHostelArgs): Promise<Hostel> {
    return await this.service.createHostel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hostel)
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async updateHostel(
    @graphql.Args() args: UpdateHostelArgs
  ): Promise<Hostel | null> {
    try {
      return await this.service.updateHostel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hostel)
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "delete",
    possession: "any",
  })
  async deleteHostel(
    @graphql.Args() args: DeleteHostelArgs
  ): Promise<Hostel | null> {
    try {
      return await this.service.deleteHostel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Room], { name: "rooms" })
  @nestAccessControl.UseRoles({
    resource: "Room",
    action: "read",
    possession: "any",
  })
  async findRooms(
    @graphql.Parent() parent: Hostel,
    @graphql.Args() args: RoomFindManyArgs
  ): Promise<Room[]> {
    const results = await this.service.findRooms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Staff], { name: "staffItems" })
  @nestAccessControl.UseRoles({
    resource: "Staff",
    action: "read",
    possession: "any",
  })
  async findStaffItems(
    @graphql.Parent() parent: Hostel,
    @graphql.Args() args: StaffFindManyArgs
  ): Promise<Staff[]> {
    const results = await this.service.findStaffItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Student], { name: "students" })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async findStudents(
    @graphql.Parent() parent: Hostel,
    @graphql.Args() args: StudentFindManyArgs
  ): Promise<Student[]> {
    const results = await this.service.findStudents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @graphql.Parent() parent: Hostel,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
