/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { HostelService } from "../hostel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HostelCreateInput } from "./HostelCreateInput";
import { Hostel } from "./Hostel";
import { HostelFindManyArgs } from "./HostelFindManyArgs";
import { HostelWhereUniqueInput } from "./HostelWhereUniqueInput";
import { HostelUpdateInput } from "./HostelUpdateInput";
import { RoomFindManyArgs } from "../../room/base/RoomFindManyArgs";
import { Room } from "../../room/base/Room";
import { RoomWhereUniqueInput } from "../../room/base/RoomWhereUniqueInput";
import { StaffFindManyArgs } from "../../staff/base/StaffFindManyArgs";
import { Staff } from "../../staff/base/Staff";
import { StaffWhereUniqueInput } from "../../staff/base/StaffWhereUniqueInput";
import { StudentFindManyArgs } from "../../student/base/StudentFindManyArgs";
import { Student } from "../../student/base/Student";
import { StudentWhereUniqueInput } from "../../student/base/StudentWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class HostelControllerBase {
  constructor(
    protected readonly service: HostelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hostel })
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createHostel(@common.Body() data: HostelCreateInput): Promise<Hostel> {
    return await this.service.createHostel({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Hostel] })
  @ApiNestedQuery(HostelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async hostels(@common.Req() request: Request): Promise<Hostel[]> {
    const args = plainToClass(HostelFindManyArgs, request.query);
    return this.service.hostels({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hostel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async hostel(
    @common.Param() params: HostelWhereUniqueInput
  ): Promise<Hostel | null> {
    const result = await this.service.hostel({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hostel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateHostel(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() data: HostelUpdateInput
  ): Promise<Hostel | null> {
    try {
      return await this.service.updateHostel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hostel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteHostel(
    @common.Param() params: HostelWhereUniqueInput
  ): Promise<Hostel | null> {
    try {
      return await this.service.deleteHostel({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/rooms")
  @ApiNestedQuery(RoomFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Room",
    action: "read",
    possession: "any",
  })
  async findRooms(
    @common.Req() request: Request,
    @common.Param() params: HostelWhereUniqueInput
  ): Promise<Room[]> {
    const query = plainToClass(RoomFindManyArgs, request.query);
    const results = await this.service.findRooms(params.id, {
      ...query,
      select: {
        createdAt: true,

        hostel: {
          select: {
            id: true,
          },
        },

        id: true,
        roomNumber: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rooms")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async connectRooms(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: RoomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rooms: {
        connect: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rooms")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async updateRooms(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: RoomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rooms: {
        set: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rooms")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async disconnectRooms(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: RoomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rooms: {
        disconnect: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/staffItems")
  @ApiNestedQuery(StaffFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Staff",
    action: "read",
    possession: "any",
  })
  async findStaffItems(
    @common.Req() request: Request,
    @common.Param() params: HostelWhereUniqueInput
  ): Promise<Staff[]> {
    const query = plainToClass(StaffFindManyArgs, request.query);
    const results = await this.service.findStaffItems(params.id, {
      ...query,
      select: {
        address: true,
        contactInformation: true,
        createdAt: true,

        hostel: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        photo: true,
        position: true,
        qualification: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/staffItems")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async connectStaffItems(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: StaffWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffItems: {
        connect: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/staffItems")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async updateStaffItems(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: StaffWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffItems: {
        set: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/staffItems")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async disconnectStaffItems(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: StaffWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      staffItems: {
        disconnect: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/students")
  @ApiNestedQuery(StudentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async findStudents(
    @common.Req() request: Request,
    @common.Param() params: HostelWhereUniqueInput
  ): Promise<Student[]> {
    const query = plainToClass(StudentFindManyArgs, request.query);
    const results = await this.service.findStudents(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        guardianDetails: true,

        hostel: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        parentDetails: true,
        photo: true,
        registrationNumber: true,
        rollNumber: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/students")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async connectStudents(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: StudentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      students: {
        connect: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/students")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async updateStudents(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: StudentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      students: {
        set: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/students")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async disconnectStudents(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: StudentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      students: {
        disconnect: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: HostelWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        firstName: true,

        hostel: {
          select: {
            id: true,
          },
        },

        id: true,
        lastName: true,
        role: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async connectUsers(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Hostel",
    action: "update",
    possession: "any",
  })
  async disconnectUsers(
    @common.Param() params: HostelWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateHostel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
