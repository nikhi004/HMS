/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Hostel as PrismaHostel,
  Room as PrismaRoom,
  Staff as PrismaStaff,
  Student as PrismaStudent,
  User as PrismaUser,
} from "@prisma/client";

export class HostelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HostelCountArgs, "select">): Promise<number> {
    return this.prisma.hostel.count(args);
  }

  async hostels<T extends Prisma.HostelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostelFindManyArgs>
  ): Promise<PrismaHostel[]> {
    return this.prisma.hostel.findMany<Prisma.HostelFindManyArgs>(args);
  }
  async hostel<T extends Prisma.HostelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostelFindUniqueArgs>
  ): Promise<PrismaHostel | null> {
    return this.prisma.hostel.findUnique(args);
  }
  async createHostel<T extends Prisma.HostelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostelCreateArgs>
  ): Promise<PrismaHostel> {
    return this.prisma.hostel.create<T>(args);
  }
  async updateHostel<T extends Prisma.HostelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostelUpdateArgs>
  ): Promise<PrismaHostel> {
    return this.prisma.hostel.update<T>(args);
  }
  async deleteHostel<T extends Prisma.HostelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostelDeleteArgs>
  ): Promise<PrismaHostel> {
    return this.prisma.hostel.delete(args);
  }

  async findRooms(
    parentId: string,
    args: Prisma.RoomFindManyArgs
  ): Promise<PrismaRoom[]> {
    return this.prisma.hostel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rooms(args);
  }

  async findStaffItems(
    parentId: string,
    args: Prisma.StaffFindManyArgs
  ): Promise<PrismaStaff[]> {
    return this.prisma.hostel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .staffItems(args);
  }

  async findStudents(
    parentId: string,
    args: Prisma.StudentFindManyArgs
  ): Promise<PrismaStudent[]> {
    return this.prisma.hostel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .students(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.hostel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
