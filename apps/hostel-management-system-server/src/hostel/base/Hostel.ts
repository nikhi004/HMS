/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsDate, IsString, IsOptional, ValidateNested } from "class-validator";
import { Type } from "class-transformer";
import { Room } from "../../room/base/Room";
import { Staff } from "../../staff/base/Staff";
import { Student } from "../../student/base/Student";
import { User } from "../../user/base/User";

@ObjectType()
class Hostel {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Room],
  })
  @ValidateNested()
  @Type(() => Room)
  @IsOptional()
  rooms?: Array<Room>;

  @ApiProperty({
    required: false,
    type: () => [Staff],
  })
  @ValidateNested()
  @Type(() => Staff)
  @IsOptional()
  staffItems?: Array<Staff>;

  @ApiProperty({
    required: false,
    type: () => [Student],
  })
  @ValidateNested()
  @Type(() => Student)
  @IsOptional()
  students?: Array<Student>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [User],
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  users?: Array<User>;
}

export { Hostel as Hostel };
